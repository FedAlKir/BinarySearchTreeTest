import unittest
from project import BinarySearchTree

class TestBinarySearchTree(unittest.TestCase):
    def test_init(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.size(), 0)
        self.assertEqual(tree.contains('one'), False)
        tree = BinarySearchTree(None, None, 'zero', 0)
        self.assertEqual(tree.size(), 1)
        self.assertEqual(tree.contains('one'), False)
        self.assertEqual(tree.contains('zero'), True)
        l1 = [0, 1, 2, 3, -3, -2, -1]
        l2 = ['zero', 'one', 'two', 'three', 'minus three', 'minus two', 'minus one']
        tree = BinarySearchTree(l2, l1, None, None)
        self.assertEqual(tree.size(), 7)
        self.assertEqual(tree.contains('three'), True)
    def test_insert(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.insert('one', 1), True)
        self.assertEqual(tree.insert('two', 2), True)
        self.assertEqual(tree.insert('one', 3), False)
    def test_remove(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.remove('one'), False)
        tree.insert('one', 1)
        self.assertEqual(tree.remove('two'), False)
        self.assertEqual(tree.remove('one'), True)
    def test_size(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.size(), 0)
        tree.insert('ten', 10)
        self.assertEqual(tree.size(), 1)
        tree.remove('ten')
        self.assertEqual(tree.size(), 0)
        tree.remove('one')
        self.assertEqual(tree.size(), 0)
        tree = BinarySearchTree(None, None, 'one', 1)
        self.assertEqual(tree.size(), 1)
    def test_contains(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.contains('one'), False)
        tree.insert('one', 1)
        self.assertEqual(tree.contains('two'), False)
        self.assertEqual(tree.contains('one'), True)
    def test_update(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.update('one', 1), False)
        tree.insert('one', 1)
        self.assertEqual(tree.update('one', 2), True)
        self.assertEqual(tree.update('two', 2), False)
    def test_print(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.print(), [])
        tree.insert('one', 1)
        tree.insert('zero', 0)
        tree.insert('two', 2)
        self.assertEqual(tree.print(), [('one', 1), ('two', 2), ('zero', 0)])
    def test_height(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.height(), 0)
        tree.insert(0, 'zero')
        self.assertEqual(tree.height(), 1)
        tree.insert(1, 'one')
        self.assertEqual(tree.height(), 2)
        tree.insert(-1, 'minus one')
        self.assertEqual(tree.height(), 2)
    def test_max(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.max(), None)
        tree.insert(1, 'one')
        self.assertEqual(tree.max(), (1, 'one'))
        tree.insert(2, 'two')
        self.assertEqual(tree.max(), (2, 'two'))
        tree.insert(0, 'zero')
        self.assertEqual(tree.max(), (2, 'two'))
    def test_min(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.min(), None)
        tree.insert(1, 'one')
        self.assertEqual(tree.min(), (1, 'one'))
        tree.insert(2, 'two')
        self.assertEqual(tree.min(), (1, 'one'))
        tree.insert(0, 'zero')
        self.assertEqual(tree.min(), (0, 'zero'))
    def test_lower_bound(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.lower_bound(0), None)
        tree.insert(0, 'zero')
        self.assertEqual(tree.lower_bound(0), None)
        self.assertEqual(tree.lower_bound(1), (0, 'zero'))
        tree.insert(1, 'one')
        tree.insert(-1, 'minus one')
        self.assertEqual(tree.lower_bound(0), (-1, 'minus one'))
        self.assertEqual(tree.lower_bound(1), (0, 'zero'))
    def test_upper_bound(self):
        tree = BinarySearchTree()
        self.assertEqual(tree.upper_bound(0), None)
        tree.insert(0, 'zero')
        self.assertEqual(tree.upper_bound(0), (0, 'zero'))
        self.assertEqual(tree.upper_bound(1), None)
        tree.insert(1, 'one')
        tree.insert(-1, 'minus one')
        self.assertEqual(tree.upper_bound(1), (1, 'one'))
        self.assertEqual(tree.upper_bound(0), (0, 'zero'))
